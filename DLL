#include <windows.h>
#include <stdio.h>
#include <atlconv.h> 
#include <WinUser.h>

#pragma comment(lib,"User32.lib")
#pragma comment(lib,"shlwapi.lib")

static HHOOK hook = 0;
static BOOL bHooked = FALSE;
static HINSTANCE hInst;

LRESULT CALLBACK KeyboardProc(int code, WPARAM wParam, LPARAM lParam);

void SendKey(UINT vk_Code)
{
	INPUT input[2];
	memset(input, 0, 2 * sizeof(INPUT));

	input[0].type = INPUT_KEYBOARD;
	input[0].ki.wVk = vk_Code;
	input[0].ki.wScan= MapVirtualKey(vk_Code, 0);

	SendInput(1, input, sizeof(INPUT));

	input[1].type = INPUT_KEYBOARD;
	input[1].ki.wVk = vk_Code;
	input[1].ki.wScan = MapVirtualKey(vk_Code, 0);
	input[1].ki.dwFlags = KEYEVENTF_KEYUP;

	SendInput(1, input+1, sizeof(INPUT));
}
void SendAscii(wchar_t data, BOOL shift)
{
	INPUT input[2];
	memset(input, 0, 2 * sizeof(INPUT));

	if (shift)
	{
		input[0].type = INPUT_KEYBOARD;
		input[0].ki.wVk = VK_SHIFT;
		SendInput(1, input, sizeof(INPUT));
	}

	input[0].type = INPUT_KEYBOARD;
	input[0].ki.wVk = data;

	input[1].type = INPUT_KEYBOARD;
	input[1].ki.wVk = data;
	input[1].ki.dwFlags = KEYEVENTF_KEYUP;

	SendInput(2, input, sizeof(INPUT));

	if (shift)
	{
		input[0].type = INPUT_KEYBOARD;
		input[0].ki.wVk = VK_SHIFT;
		input[0].ki.dwFlags = KEYEVENTF_KEYUP;
		SendInput(1, input, sizeof(INPUT));
	}
}

void SendUnicode(wchar_t data)
{
	INPUT input[2];
	memset(input, 0, 2 * sizeof(INPUT));

	input[0].type = INPUT_KEYBOARD;
	input[0].ki.wVk = 0;
	input[0].ki.wScan = data;
	input[0].ki.dwFlags = 0x4;//KEYEVENTF_UNICODE;

	input[1].type = INPUT_KEYBOARD;
	input[1].ki.wVk = 0;
	input[1].ki.wScan = data;
	input[1].ki.dwFlags = KEYEVENTF_KEYUP | 0x4;//KEYEVENTF_UNICODE;

	SendInput(2, input, sizeof(INPUT));
}

//为方便使用，下面这个函数包装了前两个函数。
void SendKeys(TCHAR *strMsg)
{
	short vk;
	BOOL shift;

	USES_CONVERSION;
	wchar_t* data = T2W(strMsg);
	int len = wcslen(data);

	for (int i = 0; i<len; i++)
	{
		if (data[i] >= 0 && data[i]<256) //ascii字符
		{
			vk = VkKeyScanW(data[i]);

			if (vk == -1)
			{
				SendUnicode(data[i]);
			}
			else
			{
				if (vk < 0)
				{
					vk = ~vk + 0x1;
				}

				shift = vk >> 8 & 0x1;

				if (GetKeyState(VK_CAPITAL) & 0x1)
				{
					if (data[i] >= 'a' && data[i] <= 'z' || data[i] >= 'A' && data[i] <= 'Z')
					{
						shift = !shift;
					}
				}

				SendAscii(vk & 0xFF, shift);
			}
		}
		else //unicode字符
		{
			SendUnicode(data[i]);
		}
	}
}

void SendWords(TCHAR *strMsg)
{
	SendKey(VK_RETURN);
	SendKeys(strMsg);
	SendKey(VK_RETURN);
}

_declspec(dllexport) void SetHookOn()
{
	if (!bHooked)
	{
		hook = SetWindowsHookEx(WH_KEYBOARD, KeyboardProc, GetModuleHandle(TEXT("DLL.dll")), GetWindowThreadProcessId(FindWindow(NULL, "Dota 2"), NULL));
		bHooked = TRUE;
	}
}
_declspec(dllexport) void SetHookOff()
{
	if (bHooked)
	{
		UnhookWindowsHookEx(hook);
		bHooked = FALSE;
	}
}

LRESULT CALLBACK KeyboardProc(int code, WPARAM wParam, LPARAM lParam)
{
	if(lParam>>31)
		switch (wParam)
		{
		case VK_F4://发送小黄文
			SendWords("YYY好菜啊");
			break;
		}
	return CallNextHookEx(hook, code, wParam, lParam);
}
BOOL APIENTRY DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)
{
	switch (dwReason)
	{
	case DLL_PROCESS_ATTACH:
		hInst = hInstance;
		break;
	case DLL_PROCESS_DETACH:
		break;
	case DLL_THREAD_ATTACH:
		break;
	case DLL_THREAD_DETACH:
		break;
	default:
		break;
	}
	return TRUE;
}
